{"meta":{"title":"诌言呓语","subtitle":null,"description":"诌言呓语","author":"诌言呓语","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-06-22T11:45:19.819Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"categories","date":"2020-06-22T12:35:23.000Z","updated":"2020-06-22T12:36:22.933Z","comments":false,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":"","keywords":null},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-06-23T00:46:45.676Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"感谢您的打赏"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-06-22T11:11:52.723Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友情链接"},{"title":"music","date":"2020-06-20T15:14:28.000Z","updated":"2020-06-23T01:48:13.770Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"shuoshuo","date":"2020-06-23T09:41:43.000Z","updated":"2020-06-23T16:31:22.392Z","comments":false,"path":"shuoshuo/index.html","permalink":"/shuoshuo/index.html","excerpt":"","text":"var appID=\"ogP8qj3veMh0LFpFWMPOyF0X-MdYXbMMI\"; var appKEY=\"nHXLd3N3Jgh460t2iRQKWAtr\"; var placeholder1=\"Demo页密码：123456\"; var per=2; var lazy=1; var slanguage=\"zh\"; var bgimg=\"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409110727.webp\"; var atemoji_array={ huaji: \"https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.9/img/Sakura/images/smilies/icon_huaji.gif\", baiyan:\"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/baiyan.png\", bishi:\"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bishi.png\", bizui:\"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bizui.png\", chan:\"https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/chan.png\" }","keywords":null},{"title":"tags","date":"2020-06-22T12:23:32.000Z","updated":"2020-06-22T12:25:08.625Z","comments":false,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":"","keywords":null},{"title":"theme-sakura-Plus","date":"2019-01-04T14:53:25.000Z","updated":"2020-06-23T00:45:53.918Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Sakura_Plus，本主题修改自Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"}],"posts":[{"title":"ue4 c++ 中Timer的用法","slug":"ue4 c++中Timer的用法","date":"2020-06-20T14:38:44.000Z","updated":"2020-06-21T01:22:57.237Z","comments":true,"path":"2020/06/20/ue4 c++中Timer的用法/","link":"","permalink":"/2020/06/20/ue4 c++中Timer的用法/","excerpt":"timer是实现游戏逻辑的一个非常重要的方式，这里记录一下用法，很简单。","text":"timer是实现游戏逻辑的一个非常重要的方式，这里记录一下用法，很简单。 header //定义一个timerhandle FTimerHandle Timer; CPP 例子一：循环执行函数 //每0，2秒执行以此showEmotion函数 GetWorld()-&gt;GetTimerManager().SetTimer(Timer, this, &amp;UCharacter_Base::ShowEmotion, 0.2f, true); //当然，getWorld()-&gt;GetTimerManager()可以用getWorldTimerManager()替代 例子二：用来实现蓝图中的delay宏类似的功能 //延迟0.2秒后执行showEmotion函数，只执行一次 GetWorld()-&gt;GetTimerManager().SetTimer(Timer, this, &amp;UCharacter_Base::ShowEmotion, 0.2f, false); //当然，getWorld()-&gt;GetTimerManager()可以用getWorldTimerManager()替代","categories":[],"tags":[{"name":"ue4","slug":"ue4","permalink":"/tags/ue4/"},{"name":"c++","slug":"c","permalink":"/tags/c/"}],"keywords":[]},{"title":"ue4 c++ 中使用自定义碰撞通道","slug":"ue4 c++ 中使用自定义碰撞通道","date":"2020-06-20T14:11:31.000Z","updated":"2020-06-21T01:22:40.826Z","comments":true,"path":"2020/06/20/ue4 c++ 中使用自定义碰撞通道/","link":"","permalink":"/2020/06/20/ue4 c++ 中使用自定义碰撞通道/","excerpt":"讲解ue4 c++ 中如何使用自定义的碰撞通道","text":"讲解ue4 c++ 中如何使用自定义的碰撞通道 添加碰撞通道 在编辑器的项目设置里面，搜索channel，然后添加你的碰撞通道 查看碰撞通道对应的字段 项目根目录/Config/DefaultEngine.ini中搜索你添加的channel的名字，就可以查看到了碰撞通道对应的字段了。例如ECC_GameTraceChannel1 然后按照正常方法使用便是了，不再累述","categories":[],"tags":[{"name":"ue4","slug":"ue4","permalink":"/tags/ue4/"},{"name":"c++","slug":"c","permalink":"/tags/c/"}],"keywords":[]},{"title":"markdown 语法笔记","slug":"Markdown 语法笔记","date":"2020-06-20T13:48:20.000Z","updated":"2020-06-21T01:23:20.511Z","comments":true,"path":"2020/06/20/Markdown 语法笔记/","link":"","permalink":"/2020/06/20/Markdown 语法笔记/","excerpt":"markdown语法笔记，内容大部分来自https://www.runoob.com/markdown/md-tutorial.html","text":"markdown语法笔记，内容大部分来自https://www.runoob.com/markdown/md-tutorial.html Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 Markdown 编写的文档后缀为 .md, .markdown。 markdown语法易错点1.对于多级标题，使用#后，#号后面得加一个空格，才能正常的设置标题级别 markdown小技巧 Markdown 标题Markdown 标题有两种格式。 1、使用 = 和 - 标记一级和二级标题= 和 - 标记语法格式如下： 我展示的是一级标题 ================= 我展示的是二级标题 ----------------- 显示效果如下图： 使用 # 号标记使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 显示效果如下图： Markdown 段落Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。 当然也可以在段落后面使用一个空行来表示重新开始一个段落。 字体Markdown 可以使用以下几种字体： *斜体文本* _斜体文本_ **粗体文本** __粗体文本__ ***粗斜体文本*** ___粗斜体文本___ 显示效果如下所示： 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： *** * * * ***** - - - ---------- 显示效果如下所示： 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下： RUNOOB.COM GOOGLE.COM ~~BAIDU.COM~~ 显示效果如下所示： 下划线下划线可以通过 HTML 的 标签来实现： &lt;u&gt;带下划线文本&lt;/u&gt; 显示效果如下所示： 脚注脚注是对文本的补充说明。值得注意的是，hexo目前不支持脚注功能，所以hexo中无法正常显示 Markdown 脚注的格式如下: [^要注明的文本] 以下实例演示了脚注的用法： 创建脚注格式类似这样 [^RUNOOB]。 [^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！ 演示效果如下： Markdown 列表Markdown 支持有序列表和无序列表。 无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容： * 第一项 * 第二项 * 第三项 + 第一项 + 第二项 + 第三项 - 第一项 - 第二项 - 第三项 显示结果如下： 有序列表使用数字并加上 . 号来表示，如： 1. 第一项 2. 第二项 3. 第三项 显示结果如下： 列表嵌套列表嵌套只需在子列表中的选项前面添加四个空格即可： 1. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素 2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示结果如下： Markdown 区块Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号： &gt; 区块引用 &gt; 菜鸟教程 &gt; 学的不仅是技术更是梦想 显示结果如下： 另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： &gt; 最外层 &gt; &gt; 第一层嵌套 &gt; &gt; &gt; 第二层嵌套 显示结果如下： 区块中使用列表区块中使用列表实例如下： &gt; 区块中使用列表 &gt; 1. 第一项 &gt; 2. 第二项 &gt; + 第一项 &gt; + 第二项 &gt; + 第三项 显示结果如下： 列表中使用区块如果要在列表项目内放进区块，那么就需要在 &gt; 前添加四个空格的缩进。 区块中使用列表实例如下： * 第一项 &gt; 菜鸟教程 &gt; 学的不仅是技术更是梦想 * 第二项 显示结果如下： Markdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如： `printf()` 函数 显示结果如下： 代码区块代码区块使用 4 个空格或者一个制表符（Tab 键）。 实例如下： 显示结果如下： 你也可以用 ` 包裹一段代码，并指定一种语言（也可以不指定）： ​```javascript $(document).ready(function () { alert(&#39;RUNOOB&#39;); }); ​ 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/88F52386-2F98-4D7E-8935-E43BECA6D868.jpg) # Markdown 链接 链接使用方法如下： 链接名称 或者 &lt;链接地址&gt; 例如： 这是一个链接 菜鸟教程 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/49E6CB42-F780-4DA6-8290-DC757B51FB9A.jpg) 直接使用链接地址： https://www.runoob.com 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/9BFF60A1-DD71-4B63-987B-4665B31C7787.jpg) ### 高级链接 我们可以通过变量来设置一个链接，变量赋值在文档末尾进行： 这个链接用 1 作为网址变量 Google这个链接用 runoob 作为网址变量 Runoob然后在文档的结尾为变量赋值（网址） 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/EC3ED5D2-4F0D-492A-81B3-D485623D1A9E.jpg) # Markdown 图片 Markdown 图片语法格式如下： - 开头一个感叹号 ! - 接着一个方括号，里面放上图片的替代文字 - 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#39;title&#39; 属性的文字。 使用实例： 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/A042DF30-C232-46F3-8436-7D6C35351BBD.jpg) 当然，你也可以像网址那样对图片网址使用变量: 这个链接用 1 作为网址变量 RUNOOB.然后在文档的结尾为变量赋值（网址） 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/75AA6EBF-CC57-44A6-A585-5EE3DD94E42A.jpg) Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。 显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/55F2A67D-F4BD-4960-AC55-DC690A415878.jpg) # Markdown 表格 Markdown 制作表格使用 **|** 来分隔不同的单元格，使用 **-** 来分隔表头和其他行。 语法格式如下： 表头 表头 单元格 单元格 单元格 单元格 以上代码显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/23EACC50-38E0-4284-B99A-6BC22E284BAC.jpg) 对齐方式 **我们可以设置表格的对齐方式：** - **-:** 设置内容和标题栏居右对齐。 - **:-** 设置内容和标题栏居左对齐。 - **:-:** 设置内容和标题栏居中对齐。 实例如下： 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 以上代码显示结果如下： ![img](https://www.runoob.com/wp-content/uploads/2019/03/87DE9D5C-44FB-4693-8735-194D3779EC3E.jpg) # Markdown 高级技巧 ### 支持的 HTML 元素 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：`&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;`等 ，如： 使用 Ctrl+Alt+Del 重启电脑 输出结果为： ![img](https://www.runoob.com/wp-content/uploads/2019/03/81999271-F914-428D-B7BF-164BDC67CAAC.jpg) ### 转义 Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： 文本加粗** 正常显示星号 ** 输出结果为： ![img](https://www.runoob.com/wp-content/uploads/2019/03/CA0E0162-0C48-41CD-B57A-CB32A4287C02.jpg) Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\ 反斜线` 反引号 星号_ 下划线{} 花括号[] 方括号() 小括号井字号 加号 减号. 英文句点! 感叹号` 公式当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如： $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\ \\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\ \\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\ \\end{vmatrix} ${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} $$ 输出结果为： Markdown 表格 1 篇笔记 写笔记 adc 928***528@qq.com 参考地址 254 typora 画流程图、时序图(顺序图)、甘特图复制以下代码使用 typora 的源码模式粘贴到编辑器中查看效果： 以下几个实例效果图如下： 1、横向流程图源码格式： ​```mermaid graph LR A[方形] --&gt;B(圆角) B --&gt; C{条件a} C --&gt;|a=1| D[结果1] C --&gt;|a=2| E[结果2] F[横向流程图] ​ **2、竖向流程图源码格式：** ​`mermaidgraph TDA[方形] –&gt; B(圆角) B --&gt; C{条件a} C --&gt; |a=1| D[结果1] C --&gt; |a=2| E[结果2] F[竖向流程图] ​` **3、标准流程图源码格式：** ​flow st=&gt;start: 开始框 op=&gt;operation: 处理框 cond=&gt;condition: 判断框(是或否?) sub1=&gt;subroutine: 子流程 io=&gt;inputoutput: 输入输出框 e=&gt;end: 结束框 st-&gt;op-&gt;cond cond(yes)-&gt;io-&gt;e cond(no)-&gt;sub1(right)-&gt;op ​ **4、标准流程图源码格式（横向）：** ​flow st=&gt;start: 开始框 op=&gt;operation: 处理框 cond=&gt;condition: 判断框(是或否?) sub1=&gt;subroutine: 子流程 io=&gt;inputoutput: 输入输出框 e=&gt;end: 结束框 st(right)-&gt;op(right)-&gt;cond cond(yes)-&gt;io(bottom)-&gt;e cond(no)-&gt;sub1(right)-&gt;op ​ **5、UML时序图源码样例：** ​sequence 对象A-&gt;对象B: 对象B你好吗?（请求） Note right of 对象B: 对象B的描述 Note left of 对象A: 对象A的描述(提示) 对象B--&gt;对象A: 我很好(响应) 对象A-&gt;对象B: 你真的好吗？ ​ **6、UML时序图源码复杂样例：** ​sequence Title: 标题：复杂使用 对象A-&gt;对象B: 对象B你好吗?（请求） Note right of 对象B: 对象B的描述 Note left of 对象A: 对象A的描述(提示) 对象B--&gt;对象A: 我很好(响应) 对象B-&gt;小三: 你好吗 小三--&gt;&gt;对象A: 对象B找我了 对象A-&gt;对象B: 你真的好吗？ Note over 小三,对象B: 我们是朋友 participant C Note right of C: 没人陪我玩 ​ **7、UML标准时序图样例：** ​`mermaid%% 时序图例子,-&gt; 直线，–&gt;虚线，-&gt;&gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-&gt;王五: 王五你好吗？ loop 健康检查 王五-&gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 &lt;br/&gt;看医生... 李四--&gt;&gt;张三: 很好! 王五-&gt;李四: 你怎么样? 李四--&gt;王五: 很好! ​` **8、甘特图样例：** ​`mermaid%% 语法示例 gantt dateFormat YYYY-MM-DD title 软件开发甘特图 section 设计 需求 :done, des1, 2014-01-06,2014-01-08 原型 :active, des2, 2014-01-09, 3d UI设计 : des3, after des2, 5d 未来任务 : des4, after des3, 5d section 开发 学习准备理解需求 :crit, done, 2014-01-06,24h 设计框架 :crit, done, after des2, 2d 开发 :crit, active, 3d 未来任务 :crit, 5d 耍 :2d section 测试 功能测试 :active, a1, after des3, 3d 压力测试 :after a1 , 20h 测试报告 : 48h ​ 效果图如下：","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"/tags/markdown/"}],"keywords":[]},{"title":"ue4 c++ 中利用行为树创建AI","slug":"ue4 c++ 中利用行为树创建AI","date":"2020-06-19T17:39:26.000Z","updated":"2020-06-21T01:23:38.551Z","comments":true,"path":"2020/06/20/ue4 c++ 中利用行为树创建AI/","link":"","permalink":"/2020/06/20/ue4 c++ 中利用行为树创建AI/","excerpt":"下面将利用实际例子来讲解如何在c++ 中利用行为树创建AI，顺带记录一些易犯糊涂的点","text":"下面将利用实际例子来讲解如何在c++ 中利用行为树创建AI，顺带记录一些易犯糊涂的点 一 在build.cs中添加modular在yourProject.build.cs^路径说明中添加两个模块，”AIModule”和 “GameplayTasks”。 例如： // Copyright 1998-2019 Epic Games, Inc. All Rights Reserved. using UnrealBuildTool; public class MyProject : ModuleRules { public MyProject(ReadOnlyTargetRules Target) : base(Target) { PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs; //========================这一行就是你要添加的位置===========================// PublicDependencyModuleNames.AddRange(new string[] { &quot;Core&quot;, &quot;CoreUObject&quot;, &quot;Engine&quot;, &quot;InputCore&quot;, &quot;AIModule&quot;, &quot;GameplayTasks&quot; }); PrivateDependencyModuleNames.AddRange(new string[] { }); } } 不这样做的话，使用和AI相关的代码后，编译就会报错 二 创建你的AI Controller继承AIController的一个类，没什么好说的 三 在要使用AI的角色类中定义行为树例如： 头文件： // Fill out your copyright notice in the Description page of Project Settings. #pragma once #include &quot;CoreMinimal.h&quot; #include &quot;Character_Base.h&quot; #include &quot;BehaviorTree/BehaviorTree.h&quot; #include &quot;BehaviorTree/BehaviorTreeComponent.h&quot; #include &quot;BehaviorTree/BlackboardComponent.h&quot; #include &quot;Enemy_Base.generated.h&quot; UCLASS() class MYPROJECT_API AEnemy_Base : public ACharacter_Base { GENERATED_BODY() protected: //===========================定义了一个BehaviorTree===========================// UPROPERTY(EditAnywhere, BlueprintReadWrite) UBehaviorTree* BehaviorTree; //========================================================================// virtual void BeginPlay() override; public: AEnemy_Base(); UBehaviorTree* GetBehaviorTree() { return BehaviorTree; } virtual void Tick(float Delta) override; }; CPP文件 // Fill out your copyright notice in the Description page of Project Settings. #include &quot;Enemy_Base.h&quot; #include &quot;Kismet/GameplayStatics.h&quot; #include &quot;../Controller/AIController_Base.h&quot; void AEnemy_Base::BeginPlay() { Super::BeginPlay(); //==========================运行行为树，并且将target设置为player0====================// ACharacter* Player = UGameplayStatics::GetPlayerCharacter(GetWorld(), 0); AAIController_Base* AIController = Cast&lt;AAIController_Base&gt;(GetController()); if (AIController) { if (Player) { //=======这里要注意的事，使用runbehaviortee函数来运行行为树，会导致原生的MoveTo任务无法完成，具体原因有待探究 //这有两种临时解决办法： //方法一：使用定义behaviorTreeComponent而不是behaviorTree，然后使用behaviorTreeComponent的startTree函数来替 代aicontroller的runbehaviorTree函数；（有效性未经验证） //方法二：自己写一个moveTo的任务 //===============================================================================// AIController-&gt;RunBehaviorTree(BehaviorTree); AIController-&gt;GetBlackboardComponent()-&gt;SetValueAsObject(&quot;Target&quot;, Player); UE_LOG(LogTemp, Warning, TEXT(&quot;The Player character 0 is enemy&#39;s default Target&quot;)); } } } 四 创建你的行为树和黑板在编辑器页面中就可以创建这两者，然后自定义你的行为树和黑板，然后将你的AI角色指定行为树 五 自定义你的行为树任务（BTTaskNode）当然，你可以直接用蓝图创建。 若要在c++中创建，步骤如下· 创建你的任务类，父类为BTTaskNode； 编写逻辑 两个比较重要的虚函数 protected: //===================任务开始执行时调用===================// virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent&amp; OwnerComp, uint8* NodeMemory); public: //=========================每帧调用=======================// //另外，调用的帧间隔能够behaviorTreeComponent中调整 virtual void TickTask(UBehaviorTreeComponent&amp; OwnerComp, uint8* NodeMemory, float DeltaSeconds); 结束任务的函数原型 FinishLatentTask(UBehaviorTreeComponent&amp; OwnerComp, EBTNodeResult::Type TaskResult) const 一些小技巧 获得ownerComp变量的方式 UBehaviorTreeComponent* OwnerComp = Cast&lt;UBehaviorTreeComponent&gt;(GetOuter()); 如果要使用任务蓝图中的finishTask函数，你可以将你的行为树任务的父类改为BTTask_BlueprintBase，不过官方并不建议使用这种方式，详情请看BTTask_BlueprintBase的注解 ^路径说明:","categories":[],"tags":[{"name":"ue4","slug":"ue4","permalink":"/tags/ue4/"},{"name":"c++","slug":"c","permalink":"/tags/c/"},{"name":"AI","slug":"AI","permalink":"/tags/AI/"}],"keywords":[]},{"title":"UE4 常用的debug方式","slug":"UE4 常用的debug方式","date":"2020-06-18T12:16:38.000Z","updated":"2020-06-21T01:23:52.748Z","comments":true,"path":"2020/06/18/UE4 常用的debug方式/","link":"","permalink":"/2020/06/18/UE4 常用的debug方式/","excerpt":"记录虚幻四中常用的debug方式","text":"记录虚幻四中常用的debug方式 方式一：使用断点调试：这个没什么好说的。 方式二：打印调试文本：虚幻四中打印文本有两种方式： 1.打印在屏幕窗口： UKismetSystemLibrary::PrintString(this, TEXT(&quot;Successed Produce NPC:%s&quot;),*produceTip); 或者 GEngine-&gt;AddOnScreenDebugMessage(-1, 5.f, FColor::Green, FString::Printf(TEXT(&quot;Successed Produce NPC : %s&quot;), *produceTip)); //上述打印的文本是c语言风格的 2.打印在输出日志 UE_LOG(LogTemp, Warning, TEXT(&quot;Successed Produce NPC:%s&quot;), getName().ToString());","categories":[],"tags":[{"name":"UE4","slug":"UE4","permalink":"/tags/UE4/"}],"keywords":[]},{"title":"UE4 如何在c++ 中使用timeline","slug":"UE4 c++ 中使用timeline","date":"2020-06-18T11:51:33.000Z","updated":"2020-06-21T01:23:07.820Z","comments":true,"path":"2020/06/18/UE4 c++ 中使用timeline/","link":"","permalink":"/2020/06/18/UE4 c++ 中使用timeline/","excerpt":"UE4 中使用timelinetimeline是比较常用的功能，蓝图中使用timeline非常的直观方便，就不再累述了，c++中使用timeline也比较简单，请看下例：","text":"UE4 中使用timelinetimeline是比较常用的功能，蓝图中使用timeline非常的直观方便，就不再累述了，c++中使用timeline也比较简单，请看下例： 头文件： UPROPERTY() FTimeline ClimbTimeline; UPROPERTY(EditAnywhere, BlueprintReadOnly, category = ClimbSystem) UCurveFloat* FloatCurve; 只需要定义一个FTimeline和一个曲线 CPP文件：#include &quot;UObject/ConstructorHelpers.h&quot; 构造函数()： { //进行资源加载,这里是初始化FloatCurve static ConstructorHelpers::FObjectFinder&lt;UCurveFloat&gt; Curve(TEXT(&quot;CurveFloat&#39;/Game/Blueprint/Curve/Curve_01.Curve_01&#39;&quot;)); check(Curve.Succeeded()); FloatCurve = Curve.Object; } BeginPlay() { if (FloatCurve) { FOnTimelineFloat OnClimbUpdate; FOnTimelineEvent OnClimbEnd; //根据函数的名字来绑定函数 OnClimbUpdate.BindUFunction(this, FName(&quot;ClimbUpdate&quot;)); //根据函数的名字来绑定函数 OnClimbEnd.BindUFunction(this, FName(&quot;ClimbEnd&quot;)); //设置timeline的曲线和update函数 ClimbTimeline.AddInterpFloat(FloatCurve, OnClimbUpdate); //设置timeline的finish函数 ClimbTimeline.SetTimelineFinishedFunc(OnClimbEnd); ClimbTimeline.SetLooping(false); //设置timeline的时间模式，这一步比较重要。 ClimbTimeline.SetTimelineLengthMode(ETimelineLengthMode::TL_TimelineLength); } } Tick() { //设置timeline的tick函数 ClimbTimeline.TickTimeline(Delta); } //--------------------------------------------------------------------------------------------------------//","categories":[],"tags":[{"name":"UE4","slug":"UE4","permalink":"/tags/UE4/"}],"keywords":[]},{"title":"hexo的笔记","slug":"Hexo 笔记","date":"2020-06-13T15:51:15.000Z","updated":"2020-06-21T01:21:36.143Z","comments":true,"path":"2020/06/13/Hexo 笔记/","link":"","permalink":"/2020/06/13/Hexo 笔记/","excerpt":"hexo 的一些小笔记","text":"hexo 的一些小笔记 hexo的常用命令：hexo c *清除本地缓存 hexo g *生成文件 hexo d *配置文件到github上 hexo s * 本地运行博客网站 hexo n 新建博客名 *新建一份博客，路径为source:\\_posts hexo 易错点文章中的title，data，tags的冒号后面均有一个空格，否则将生成失败 hexo小技巧 使用&amp;&amp;符号可以将多个命令按照顺序执行 例如： hexo c &amp;&amp; hexo g &amp;&amp; hexo d tags中使用多个标签 例如： tags: [hexo, markdown] //注意：冒号和逗号后面均有一个空格","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}],"keywords":[]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: { path: /, fa: fa-fort-awesome faa-shake } 归档: { path: /archives, fa: fa-archive faa-shake, submenus: { 技术: {path: /categories/技术/, fa: fa-code }, 生活: {path: /categories/生活/, fa: fa-file-text-o }, 资源: {path: /categories/资源/, fa: fa-cloud-download }, 随想: {path: /categories/随想/, fa: fa-commenting-o }, 转载: {path: /categories/转载/, fa: fa-book } } } 清单: { path: javascript:;, fa: fa-list-ul faa-vertical, submenus: { 书单: {path: /tags/悦读/, fa: fa-th-list faa-bounce }, 番组: {path: /bangumi/, fa: fa-film faa-vertical }, 歌单: {path: /music/, fa: fa-headphones }, 图集: {path: /tags/图集/, fa: fa-photo } } } 留言板: { path: /comment/, fa: fa-pencil-square-o faa-tada } 友人帐: { path: /links/, fa: fa-link faa-shake } 赞赏: { path: /donate/, fa: fa-heart faa-pulse } 关于: { path: /, fa: fa-leaf faa-wrench , submenus: { 我？: {path: /about/, fa: fa-meetup}, 主题: {path: /theme-sakura/, fa: iconfont icon-sakura }, Lab: {path: /lab/, fa: fa-cogs }, } } 客户端: { path: /client/, fa: fa-android faa-vertical } RSS: { path: /atom.xml, fa: fa-rss faa-pulse } # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - {url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png} - {url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg} - {url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg} # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: {url: http://github.com/honjun, img: /img/social/github.png} sina: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png} wangyiyun: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png} zhihu: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png} email: {url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg} wechat: {url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png} # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: {url: http://github.com/honjun, fa: fa-github, color: 333} weibo: {url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39} qq: {url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe} # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： {% bili video_id [page] %} 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： {% fb_img src [caption] %} 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}